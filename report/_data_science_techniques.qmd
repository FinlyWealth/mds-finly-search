#### Data Source and Description

The dataset consists of multi-modal product data, including images, textual descriptions, and structured metadata. It includes:

- **14,684,588 JPEG images** (≈ 67 GB), each under 150 × 150 pixels. Filenames correspond to the `Pid` field in the metadata CSV. Although this is slightly fewer than the number of unique product entries (15,147,805), we assume a 1:1 mapping between images and product listings based on confirmation from our project partner.
- **A 12 GB CSV file** with 15,384,100 rows and 30 columns, each row representing a product listing. Metadata fields include `Pid`, `Name`, `Description`, `Category`, `Brand`, `Color`, `Price`, `Gender`, and product URLs.

This dataset was provided by FinlyWealth via its affiliate network and will underpin both exploratory analysis and model development.

#### Exploratory Data Analysis

Several metadata columns contained substantial missing values and were therefore dropped in favor of more complete fields (see @tbl-dropcolumns). Attributes like `Color`, `Gender`, and `Brand` still have missing entries but were retained because they add modeling value (see @tbl-keptcolumns). The missingness in these fields may be due to certain product types—such as books—lacking those attributes (see the category distribution in @fig-categorydist).

: Table: Summary of Dropped Columns and Reasons {#tbl-dropcolumns}

| **Attribute**        | **Reason Dropped**                             |
|----------------------|------------------------------------------------|
| `ShortDescription`   | 91% missing                                    |
| `Keywords`           | 99% missing                                    |
| `CategoryId`         | Redundant with `Category`                      |
| `ImageURL`           | Not used directly in modeling                  |
| `SalePrice`          | Redundant with `FinalPrice` / incomplete usage |
| `PriceCurrency`      | Not used in current modeling scope             |
| `MPN`                | High cardinality (~2.3 M values), sparse       |
| `UPCorEAN`           | High cardinality (~3.5 M values), sparse       |
| `SKU`                | Redundant with `Pid` (~10 M values)            |
| `AlternateImageUrl*` | Not used; only primary image needed            |
| `DeepLinkURL`        | Not relevant for modeling                      |
| `LinkUrl`            | Not relevant for modeling                      |

: Table: Summary of Retained Columns and Their Characteristics {#tbl-keptcolumns}

| **Group**               | **Attribute**    | **Description / Examples**                               |
|-------------------------|------------------|----------------------------------------------------------|
| **Identifiers**         | `Pid`            | Unique product ID; links to image filenames              |
| **Text Fields**         | `Name`           | Product title (0.2% missing)                             |
|                         | `Description`    | Product description (0.03% missing)                      |
|                         | `Category`       | Product category (28% missing; ~15 K unique values)      |
| **Pricing & Availability** | `Price`       | Listed price                                            |
|                         | `FinalPrice`     | Final price after discounts                              |
|                         | `Discount`       | Discount percentage or value                             |
|                         | `isOnSale`       | Boolean flag                                            |
|                         | `IsInStock`      | Boolean flag                                            |
| **Branding**            | `Brand`          | Brand name (53% missing; ~21 K unique values)            |
|                         | `Manufacturer`   | Manufacturer name (34% missing; ~26 K unique values)     |
| **Product Features**    | `Color`          | Product color (49% missing; ~170 K unique values)        |
|                         | `Gender`         | Target gender (54% missing; 3 values: e.g., male/female) |
|                         | `Size`           | Product size (46% missing; ~55 K unique values)          |
|                         | `Condition`      | Product condition (e.g., new, used; 5 values)            |

![Top 8 Product Categories with Others Grouped](../img/categorydist.png){#fig-categorydist}

High-cardinality fields such as `Category`, `Size`, and `Brand` (see @fig-uniquecounts) may require grouping rare values to avoid overfitting and reduce memory usage. We merged `Brand` and `Manufacturer` into a single `MergedBrand` column to reduce duplication while preserving distinct information. We also excluded non-English market entries—retaining approximately 70% of the dataset—as confirmed by our partner.

![Unique Value Counts per Column After Data Cleaning](../img/uniquecounts.png){#fig-uniquecounts}

To understand likely user searches, we analyzed the 50 most frequent words in product names (see @fig-topwords). Common terms like “womens”, “mens”, “size”, and “black” appear frequently and often overlap with metadata fields such as `Gender` and `Color`.

![Top 50 Words in Product Names](../img/topwords.png){#fig-topwords}

{{< pagebreak >}}

### Methodology: Capturing User Intent

![Workflow Diagram](../img/workflow.png){#fig-workflow}

@fig-workflow illustrates the end-to-end architecture, including a user interface, an API server for query processing, and a database for storing embeddings and metadata.

#### System Workflow

- **User Interface:** A web interface accepts text or image queries, designed for intuitive interaction.
- **API Endpoint & Preprocessing:** Queries are sent to our Flask[@flask] server, where they undergo preprocessing.
- **Embedding Generation:** After preprocessing, text is transformed into representations that can be compared with stored data. We generate embeddings using OpenAI CLIP[@openaiclip] (Contrastive Language–Image Pre-training) or create text vectors via TF-IDF[@aizawa2003information].
- **Similarity Calculation & Retrieval:** We calculate similarity (e.g., cosine similarity[@xia2015learning], Euclidean distance, dot product[@ogita2005accurate]) between query and product representations. FAISS[@faiss] supports fast, scalable retrieval.
- **Database & Indexing:** Preprocessed embeddings and metadata are stored in a centralized database. We evaluated vector-aware options such as Pinecone[@pinecone], ChromaDB[@chromadb], and PostgreSQL[@postgresql] with pgvector for efficient similarity search.

**Baseline Approach:** We implement a TF-IDF-based retrieval model as an interpretable, lightweight baseline.

**Tools and Libraries:** See the appendix for a complete list.

#### Implementation Challenges

- Scalability (latency and memory) for efficient retrieval over a large catalog  
- Data-quality issues (e.g., high-cardinality metadata) that can degrade TF-IDF and CLIP performance  
- Defining and implementing metrics to evaluate multimodal query effectiveness  
- Experimentally tuning and validating hybrid-retrieval weights (semantic vs. lexical)  