import os
import json
import numpy as np
import pandas as pd
from db import init_db, store_embeddings, update_documents, drop_and_recreate_table

# This script is used to load the embeddings and update documents in the database
def main():
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    data_dir = os.path.join(project_root, 'data')
    
    print(f"Loading embeddings from {data_dir}...")
    load_path = os.path.join(data_dir, 'embeddings.npz')
    
    data = np.load(load_path)
    
    # Get embedding dimensions from the file
    embedding_dim = data['text_embeddings'].shape[1]
    print(f"Embedding dimension: {embedding_dim}")
    
    print("Loading metadata...")
    df = pd.read_parquet(os.path.join(data_dir, 'merged_output_sample_100k.parquet'))
    
    # Text fields to combine for TF-IDF search
    text_fields = [
        "Description", "Category", "Brand", "Manufacturer", 
        "Color", "Gender", "Size"
    ]
    
    # Create combined text
    print("Creating combined text...")
    df['combined_text'] = df[text_fields].fillna('').astype(str).agg(' '.join, axis=1).str.lower()
    
    print("Initializing database...")
    init_db(embedding_dim)
    
    print("Dropping and recreating table...")
    drop_and_recreate_table(embedding_dim)
    
    print("Storing embeddings in database...")
    store_embeddings(data['text_embeddings'], data['image_embeddings'], data['product_ids'].astype(str))
    
    # Prepare product texts for update
    print("Preparing product texts...")
    product_texts = list(zip(df['Pid'].tolist(), df['combined_text'].tolist()))
    
    # Update documents in database
    print("Updating documents in database...")
    update_documents(product_texts)
    
    print("Done!")

if __name__ == '__main__':
    main()